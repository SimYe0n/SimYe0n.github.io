window.onload = function() {
// Fade-in fondo negro (fade-in-background activa el overlay negro en el CSS)
document.body.classList.add('fade-in-background');

// Espera a que termine la transición del fondo (1.5s) y luego inicia la transición del contenido
setTimeout(function() {
document.body.classList.add('fade-in-content');
}, 200);

// Agrega event listeners a los enlaces de la barra de navegación
document.querySelectorAll('#navbar a').forEach(anchor => {
anchor.addEventListener('click', function (e) {
e.preventDefault();
const targetId = this.getAttribute('href').substring(1);
const targetElement = document.getElementById(targetId);

// Oculta todas las secciones y quita la clase visible
document.querySelectorAll('section').forEach(section => {
section.classList.remove('visible');
section.style.display = 'none';
});

// Muestra la sección objetivo
targetElement.style.display = 'block';
// Aplica la clase visible con un pequeño retardo para activar la transición
setTimeout(function() {
targetElement.classList.add('visible');
}, 10);

// Si el contenedor principal tiene overflow-y: auto, reinicia el scroll al cambiar de sección
const stuffContainer = document.getElementById('stuff');
if (stuffContainer) {
stuffContainer.scrollTop = 0;
}
});
});

// Oculta todas las secciones al cargar, excepto la "home"
document.querySelectorAll('section').forEach(section => {
section.classList.remove('visible');
section.style.display = 'none';
});
const homeSection = document.getElementById('home');
homeSection.style.display = 'block';
setTimeout(function() {
homeSection.classList.add('visible');
}, 10);
};

const audioPlayer = document.getElementById('audio-player');
const playPauseButton = document.getElementById('play-pause-button');
const prevButton = document.getElementById('prev-button');
const nextButton = document.getElementById('next-button');
const songTitleSpan = document.getElementById('song-title');
const artistNameSpan = document.getElementById('artist-name');
const volumeButton = document.getElementById('volume-button');
const volumeSliderContainer = document.getElementById('volume-slider-container');
const volumeSlider = document.getElementById('volume-slider');

// Nuevas referencias para el botón de opciones y el modal de la lista de canciones
const moreOptionsButton = document.getElementById('more-options-button');
const songListModal = document.getElementById('song-list-modal');
const playlistItemsUl = document.getElementById('playlist-items');

// Referencias a los elementos SVG del progreso circular
const progressFillCircle = document.querySelector('.progress-fill');
// Actualizado el radio para el nuevo tamaño del wrapper (32px) y stroke-width (1.5px)
const radius = 15.25; // (32 / 2) - (1.5 / 2) = 16 - 0.75 = 15.25
const circumference = 2 * Math.PI * radius; // Circunferencia del círculo

// Establece la longitud total del trazo para la barra de progreso
progressFillCircle.style.strokeDasharray = circumference;

// Lista de canciones de ejemplo (reemplaza con tus propias URLs de MP3)
// La lista de canciones ha sido actualizada con las URLs proporcionadas.
const playlist = [
{
title: 'Sonne',
artist: 'Artista 1',
src: 'https://files.catbox.moe/97tuot.mp3'
},
{
title: 'Lacrimosa',
artist: 'Artista 2',
src: 'https://files.catbox.moe/2lt6q1.mp3'
},
{
title: 'Vampire knight',
artist: 'Artista 3',
src: 'https://files.catbox.moe/y8h0ib.mp3'
},
{
title: 'Succession',
artist: 'Artista 4',
src: 'https://files.catbox.moe/545q3b.mp3'
},
{
title: 'Ofelia',
artist: 'Artista 6',
src: 'https://files.catbox.moe/5glv7m.mp3'
},
{
title: 'Cordelia',
artist: 'Artista 7',
src: 'https://files.catbox.moe/gw2skq.mp3'
},
{
title: 'Carmelia',
artist: 'Artista 8',
src: 'https://files.catbox.moe/knu90q.mp3'
}
];

let currentSongIndex = 0; // Índice de la canción actual
let isPlaying = false; // Estado de reproducción
let lastVolume = 0.5; // Guarda el último volumen antes de silenciar

// Función para formatear el tiempo (minutos:segundos)
function formatTime(seconds) {
const minutes = Math.floor(seconds / 60);
const remainingSeconds = Math.floor(seconds % 60);
return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
}

// Carga y reproduce una canción de la playlist
function loadSong(index) {
if (playlist.length === 0) {
songTitleSpan.textContent = 'No hay canciones';
artistNameSpan.textContent = '';
audioPlayer.src = '';
playPauseButton.innerHTML = '<i class="fas fa-play"></i>';
isPlaying = false;
progressFillCircle.style.strokeDashoffset = circumference;
return;
}

const song = playlist[index];
audioPlayer.src = song.src;
songTitleSpan.textContent = song.title;
artistNameSpan.textContent = song.artist;
currentSongIndex = index;

// Actualiza la clase 'active' en la lista de reproducción si el modal está abierto
const currentActive = playlistItemsUl.querySelector('.active');
if (currentActive) {
currentActive.classList.remove('active');
}
const newActive = playlistItemsUl.querySelector(`li[data-index="${index}"]`);
if (newActive) {
newActive.classList.add('active');
}

// Reinicia la barra de progreso circular al cargar una nueva canción
progressFillCircle.style.strokeDashoffset = circumference;

audioPlayer.load();

// Si el reproductor estaba en reproducción, intenta reproducir la nueva canción.
if (isPlaying) {
audioPlayer.play().catch(error => {
console.error('Error al intentar reproducir automáticamente:', error);
});
}
}

audioPlayer.addEventListener('loadedmetadata', () => {
updateVolumeIcon(audioPlayer.volume);
});

audioPlayer.addEventListener('timeupdate', () => {
if (!isNaN(audioPlayer.duration)) {
const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
const offset = circumference - (progress / 100) * circumference;
progressFillCircle.style.strokeDashoffset = offset;
}
});

audioPlayer.addEventListener('ended', () => {
if (playlist.length > 0) {
currentSongIndex = (currentSongIndex + 1) % playlist.length;
loadSong(currentSongIndex);
audioPlayer.play();
} else {
isPlaying = false;
playPauseButton.innerHTML = '<i class="fas fa-play"></i>';
}
});

playPauseButton.addEventListener('click', () => {
if (playlist.length === 0) {
console.warn('No hay canciones en la playlist para reproducir.');
return;
}
if (isPlaying) {
audioPlayer.pause();
playPauseButton.innerHTML = '<i class="fas fa-play"></i>';
} else {
audioPlayer.play().catch(error => {
console.error('Error al intentar reproducir:', error);
});
playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
}
isPlaying = !isPlaying;
});

prevButton.addEventListener('click', () => {
if (playlist.length === 0) return;
currentSongIndex = (currentSongIndex - 1 + playlist.length) % playlist.length;
loadSong(currentSongIndex);
isPlaying = true;
playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
});

nextButton.addEventListener('click', () => {
if (playlist.length === 0) return;
currentSongIndex = (currentSongIndex + 1) % playlist.length;
loadSong(currentSongIndex);
isPlaying = true;
playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
});

// Funcionalidad para alternar la visibilidad del modal de la lista de canciones
function toggleSongListModal() {
songListModal.classList.toggle('visible');
if (songListModal.classList.contains('visible')) {
renderPlaylist();
}
}

function renderPlaylist() {
playlistItemsUl.innerHTML = '';
if (playlist.length === 0) {
const li = document.createElement('li');
li.textContent = 'No hay canciones en la lista.';
li.style.textAlign = 'center';
li.style.fontStyle = 'italic';
li.style.color = '#888';
playlistItemsUl.appendChild(li);
return;
}

playlist.forEach((song, index) => {
const li = document.createElement('li');
li.textContent = `${song.title} - ${song.artist}`;
li.dataset.index = index;
if (index === currentSongIndex) {
li.classList.add('active');
}
li.addEventListener('click', () => {
loadSong(index);
isPlaying = true;
playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
toggleSongListModal();
});
playlistItemsUl.appendChild(li);
});
}

moreOptionsButton.addEventListener('click', (e) => {
e.stopPropagation();
toggleSongListModal();
});

document.addEventListener('click', (e) => {
if (!songListModal.contains(e.target) && !moreOptionsButton.contains(e.target) && songListModal.classList.contains('visible')) {
songListModal.classList.remove('visible');
}
});

// Control de volumen
volumeButton.addEventListener('click', (e) => {
e.stopPropagation();
volumeSliderContainer.classList.toggle('visible');

if (audioPlayer.muted) {
audioPlayer.muted = false;
audioPlayer.volume = lastVolume;
volumeSlider.value = lastVolume;
updateVolumeIcon(lastVolume);
} else {
lastVolume = audioPlayer.volume;
audioPlayer.muted = true;
audioPlayer.volume = 0;
volumeSlider.value = 0;
updateVolumeIcon(0);
}
});

// Actualiza el volumen cuando se mueve el slider
volumeSlider.addEventListener('input', () => {
audioPlayer.volume = volumeSlider.value;
audioPlayer.muted = (audioPlayer.volume === 0);
updateVolumeIcon(audioPlayer.volume);
});

// Actualiza el icono de volumen según el nivel de volumen
function updateVolumeIcon(volume) {
if (volume === 0) {
volumeButton.innerHTML = '<i class="fas fa-volume-mute"></i>';
} else if (volume < 0.5) {
volumeButton.innerHTML = '<i class="fas fa-volume-down"></i>';
} else {
volumeButton.innerHTML = '<i class="fas fa-volume-up"></i>';
}
}

document.addEventListener('click', (e) => {
if (!volumeSliderContainer.contains(e.target) && !volumeButton.contains(e.target) && volumeSliderContainer.classList.contains('visible')) {
volumeSliderContainer.classList.remove('visible');
}
});

// Inicializa el reproductor cargando la primera canción
audioPlayer.volume = lastVolume;
volumeSlider.value = lastVolume;
updateVolumeIcon(lastVolume);
loadSong(currentSongIndex);

// --- Cartel de bienvenida ---
document.addEventListener('DOMContentLoaded', () => {
const welcomeModal = document.getElementById('welcome-modal');
const musicOnButton = document.getElementById('music-on-button');
const musicOffButton = document.getElementById('music-off-button');

if (welcomeModal) welcomeModal.classList.add('show');

function closeWelcomeModal(playMusic) {
if (welcomeModal) welcomeModal.classList.remove('show');
// Controla el reproductor de música
const audioPlayer = document.getElementById('audio-player');
const playPauseButton = document.getElementById('play-pause-button');
if (audioPlayer && playPauseButton) {
if (playMusic) {
audioPlayer.muted = false;
audioPlayer.volume = 0.5;
audioPlayer.play();
playPauseButton.innerHTML = '<i class="fas fa-pause"></i>';
window.isPlaying = true;
} else {
audioPlayer.pause();
playPauseButton.innerHTML = '<i class="fas fa-play"></i>';
window.isPlaying = false;
}
}
}

if (musicOnButton) {
musicOnButton.addEventListener('click', () => {
closeWelcomeModal(true);
});
}
if (musicOffButton) {
musicOffButton.addEventListener('click', () => {
closeWelcomeModal(false);
});
}

if (welcomeModal) {
welcomeModal.addEventListener('click', (event) => {
if (event.target === welcomeModal) {
closeWelcomeModal(false);
}
});
}
});
// --- FIN cartel bienvenida ---
// --- FIN cartel bienvenida ---
